// generated with ast extension for cup
// version 0.8
// 13/8/2023 0:3:14


package rs.ac.bg.etf.pp1.ast;

public interface Visitor { 

    public void visit(Mulop Mulop);
    public void visit(Opp Opp);
    public void visit(MulopFactorList MulopFactorList);
    public void visit(StatementList StatementList);
    public void visit(Addop Addop);
    public void visit(Factor Factor);
    public void visit(DeclList DeclList);
    public void visit(Designator Designator);
    public void visit(Term Term);
    public void visit(TypeIdentList TypeIdentList);
    public void visit(ConstValList ConstValList);
    public void visit(BracketList BracketList);
    public void visit(ExprBracketsForm ExprBracketsForm);
    public void visit(Brackets Brackets);
    public void visit(ExprList ExprList);
    public void visit(VarDeclNameBrackets VarDeclNameBrackets);
    public void visit(VarDeclList VarDeclList);
    public void visit(Expr Expr);
    public void visit(ConstVal ConstVal);
    public void visit(FormParsForm FormParsForm);
    public void visit(DesignatorStatement DesignatorStatement);
    public void visit(Decl Decl);
    public void visit(Statement Statement);
    public void visit(Prazna Prazna);
    public void visit(MethodDeclList MethodDeclList);
    public void visit(DesignatorFormList DesignatorFormList);
    public void visit(DesignatorForm DesignatorForm);
    public void visit(AddopTermList AddopTermList);
    public void visit(MulopMod MulopMod);
    public void visit(MulopDiv MulopDiv);
    public void visit(MulopMul MulopMul);
    public void visit(AddopMinus AddopMinus);
    public void visit(AddopPlus AddopPlus);
    public void visit(Assignop Assignop);
    public void visit(Label Label);
    public void visit(NoExprBrackets NoExprBrackets);
    public void visit(ExprBracketsFormExist ExprBracketsFormExist);
    public void visit(DesignatorName DesignatorName);
    public void visit(PraznaDerived1 PraznaDerived1);
    public void visit(DesignatorNoExpr DesignatorNoExpr);
    public void visit(DesignatorExpr DesignatorExpr);
    public void visit(DesignatorFactor DesignatorFactor);
    public void visit(ExprFactor ExprFactor);
    public void visit(NewFactor NewFactor);
    public void visit(BoolFactor BoolFactor);
    public void visit(CharFactor CharFactor);
    public void visit(NumFactor NumFactor);
    public void visit(NoMulopFactor NoMulopFactor);
    public void visit(MulopFactorListExist MulopFactorListExist);
    public void visit(TermYesMulop TermYesMulop);
    public void visit(TermNoMulop TermNoMulop);
    public void visit(NoAddopTerm NoAddopTerm);
    public void visit(AddopTermListExist AddopTermListExist);
    public void visit(ExprPOsitiveNoTermList ExprPOsitiveNoTermList);
    public void visit(ExprMinusNoTermList ExprMinusNoTermList);
    public void visit(ExprPositive ExprPositive);
    public void visit(ExprMinus ExprMinus);
    public void visit(NoExprList NoExprList);
    public void visit(ExprListExist ExprListExist);
    public void visit(NoDesignatorForm NoDesignatorForm);
    public void visit(DesignatorFormListExist DesignatorFormListExist);
    public void visit(NoDesignator NoDesignator);
    public void visit(DesignatorFormExist DesignatorFormExist);
    public void visit(Opp4 Opp4);
    public void visit(Opp3 Opp3);
    public void visit(DesignatorStatementDerived1 DesignatorStatementDerived1);
    public void visit(DesignatorStmt2 DesignatorStmt2);
    public void visit(DesignatorStmt3 DesignatorStmt3);
    public void visit(DesignatorStmt1 DesignatorStmt1);
    public void visit(RightDesignator RightDesignator);
    public void visit(PrintStmt PrintStmt);
    public void visit(PrintStmtComma PrintStmtComma);
    public void visit(ReadStmt ReadStmt);
    public void visit(FindAnyStmt FindAnyStmt);
    public void visit(DesStatement DesStatement);
    public void visit(Type Type);
    public void visit(NoTypeIdent NoTypeIdent);
    public void visit(TypeIdentListExist TypeIdentListExist);
    public void visit(NoStatement NoStatement);
    public void visit(StatementListExist StatementListExist);
    public void visit(NoVarDeclList NoVarDeclList);
    public void visit(VarDeclListExist VarDeclListExist);
    public void visit(BracketsName BracketsName);
    public void visit(NoBracketList NoBracketList);
    public void visit(BracketListExist BracketListExist);
    public void visit(NoBrackets NoBrackets);
    public void visit(BracketsDerived1 BracketsDerived1);
    public void visit(BracketsExist BracketsExist);
    public void visit(VarDeclNameBracketsDerived1 VarDeclNameBracketsDerived1);
    public void visit(VarDeclNameNoBrackets VarDeclNameNoBrackets);
    public void visit(VarDeclNameYesBrackets VarDeclNameYesBrackets);
    public void visit(VarDecl VarDecl);
    public void visit(ConstValName ConstValName);
    public void visit(NoConstVal NoConstVal);
    public void visit(ConstValListsExist ConstValListsExist);
    public void visit(ConstValDerived1 ConstValDerived1);
    public void visit(ConstValChar ConstValChar);
    public void visit(ConstValBool ConstValBool);
    public void visit(ConstValNum ConstValNum);
    public void visit(ConstDecl ConstDecl);
    public void visit(DeclVar DeclVar);
    public void visit(DeclConst DeclConst);
    public void visit(NoDecl NoDecl);
    public void visit(Declarations Declarations);
    public void visit(FormPars FormPars);
    public void visit(NoFormPars NoFormPars);
    public void visit(FormParsFormExist FormParsFormExist);
    public void visit(MethodName MethodName);
    public void visit(MethodDecl MethodDecl);
    public void visit(NoMethodDeclList NoMethodDeclList);
    public void visit(MethodDeclListExist MethodDeclListExist);
    public void visit(ProgName ProgName);
    public void visit(Program Program);

}
